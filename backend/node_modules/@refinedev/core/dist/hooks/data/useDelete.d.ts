import { UseMutationResult, UseMutationOptions } from "@tanstack/react-query";
import { DeleteOneResponse, MutationMode, PrevContext as DeleteContext, BaseRecord, BaseKey, HttpError, SuccessErrorNotification, IQueryKeys, MetaQuery } from "../../interfaces";
export declare type DeleteParams<TData, TError, TVariables> = {
    id: BaseKey;
    resource: string;
    mutationMode?: MutationMode;
    undoableTimeout?: number;
    onCancel?: (cancelMutation: () => void) => void;
    meta?: MetaQuery;
    /**
     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.
     */
    metaData?: MetaQuery;
    dataProviderName?: string;
    invalidates?: Array<keyof IQueryKeys>;
    values?: TVariables;
} & SuccessErrorNotification<DeleteOneResponse<TData>, TError, BaseKey>;
export declare type UseDeleteReturnType<TData extends BaseRecord = BaseRecord, TError = HttpError, TVariables = {}> = UseMutationResult<DeleteOneResponse<TData>, TError, DeleteParams<TData, TError, TVariables>, DeleteContext<TData>>;
export declare type UseDeleteProps<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TVariables = {}> = {
    mutationOptions?: Omit<UseMutationOptions<DeleteOneResponse<TData>, TError, DeleteParams<TData, TError, TVariables>, DeleteContext<TData>>, "mutationFn" | "onError" | "onSuccess" | "onSettled" | "onMutate">;
};
/**
 * `useDelete` is a modified version of `react-query`'s {@link https://react-query.tanstack.com/reference/useMutation `useMutation`} for delete mutations.
 *
 * It uses `deleteOne` method as mutation function from the `dataProvider` which is passed to `<Refine>`.
 *
 * @see {@link https://refine.dev/docs/api-references/hooks/data/useDelete} for more details.
 *
 * @typeParam TData - Result data of the query extends {@link https://refine.dev/docs/api-references/interfaceReferences#baserecord `BaseRecord`}
 * @typeParam TError - Custom error object that extends {@link https://refine.dev/docs/api-references/interfaceReferences#httperror `HttpError`}
 * @typeParam TVariables - Values for params. default `{}`
 *
 */
export declare const useDelete: <TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TVariables = {}>({ mutationOptions, }?: UseDeleteProps<TData, TError, TVariables>) => UseDeleteReturnType<TData, TError, TVariables>;
//# sourceMappingURL=useDelete.d.ts.map