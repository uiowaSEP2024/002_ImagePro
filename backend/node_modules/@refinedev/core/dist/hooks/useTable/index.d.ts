import React from "react";
import { QueryObserverResult, UseQueryOptions } from "@tanstack/react-query";
import { BaseRecord, CrudFilters, CrudSorting, GetListResponse, SuccessErrorNotification, HttpError, MetaQuery, LiveModeProps, Pagination, Prettify } from "../../interfaces";
import { BaseListProps } from "../data/useList";
declare type SetFilterBehavior = "merge" | "replace";
export declare type useTableProps<TData, TError> = {
    /**
     * Resource name for API data interactions
     * @default Resource name that it reads from route
     */
    resource?: string;
    /**
     * Configuration for pagination
     */
    pagination?: Pagination;
    /**
     * Initial page index
     * @default 1
     * @deprecated `initialCurrent` property is deprecated. Use `pagination.current` instead.
     */
    initialCurrent?: number;
    /**
     * Initial number of items per page
     * @default 10
     * @deprecated `initialPageSize` property is deprecated. Use `pagination.pageSize` instead.
     */
    initialPageSize?: number;
    /**
     * Sort configs
     */
    sorters?: {
        /**
         * Initial sorter state
         */
        initial?: CrudSorting;
        /**
         * Default and unchangeable sorter state
         *  @default `[]`
         */
        permanent?: CrudSorting;
    };
    /**
     * Initial sorter state
     * @deprecated `initialSorter` property is deprecated. Use `sorters.initial` instead.
     */
    initialSorter?: CrudSorting;
    /**
     * Default and unchangeable sorter state
     *  @default `[]`
     *  @deprecated `permanentSorter` property is deprecated. Use `sorters.permanent` instead.
     */
    permanentSorter?: CrudSorting;
    /**
     * Filter configs
     */
    filters?: {
        /**
         * Initial filter state
         */
        initial?: CrudFilters;
        /**
         * Default and unchangeable filter state
         *  @default `[]`
         */
        permanent?: CrudFilters;
        /**
         * Default behavior of the `setFilters` function
         * @default `"merge"`
         */
        defaultBehavior?: SetFilterBehavior;
    };
    /**
     * Initial filter state
     * @deprecated `initialFilter` property is deprecated. Use `filters.initial` instead.
     */
    initialFilter?: CrudFilters;
    /**
     * Default and unchangeable filter state
     * @default `[]`
     * @deprecated `permanentFilter` property is deprecated. Use `filters.permanent` instead.
     */
    permanentFilter?: CrudFilters;
    /**
     * Default behavior of the `setFilters` function
     * @default `"merge"`
     * @deprecated `defaultSetFilterBehavior` property is deprecated. Use `filters.defaultBehavior` instead.
     */
    defaultSetFilterBehavior?: SetFilterBehavior;
    /**
     * Whether to use server side pagination or not.
     * @default `true`
     * @deprecated `hasPagination` property is deprecated. Use `pagination.mode` instead.
     */
    hasPagination?: boolean;
    /**
     * Sortings, filters, page index and records shown per page are tracked by browser history
     * @default Value set in [Refine](/docs/api-reference/core/components/refine-config/#syncwithlocation). If a custom resource is given, it will be `false`
     */
    syncWithLocation?: boolean;
    /**
     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options
     */
    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;
    /**
     * Metadata query for dataProvider
     */
    meta?: MetaQuery;
    /**
     * Metadata query for dataProvider
     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.
     */
    metaData?: MetaQuery;
    /**
     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.
     */
    dataProviderName?: string;
} & SuccessErrorNotification<GetListResponse<TData>, TError, Prettify<BaseListProps>> & LiveModeProps;
declare type ReactSetState<T> = React.Dispatch<React.SetStateAction<T>>;
declare type SyncWithLocationParams = {
    pagination: {
        current?: number;
        pageSize?: number;
    };
    /**
     * @deprecated `sorter` is deprecated. Use `sorters` instead.
     */
    sorter?: CrudSorting;
    sorters: CrudSorting;
    filters: CrudFilters;
};
export declare type useTableReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError> = {
    tableQueryResult: QueryObserverResult<GetListResponse<TData>, TError>;
    /**
     * @deprecated `sorter` is deprecated. Use `sorters` instead.
     */
    sorter: CrudSorting;
    sorters: CrudSorting;
    /**
     * @deprecated `setSorter` is deprecated. Use `setSorters` instead.
     */
    setSorter: (sorter: CrudSorting) => void;
    setSorters: (sorter: CrudSorting) => void;
    filters: CrudFilters;
    setFilters: ((filters: CrudFilters, behavior?: SetFilterBehavior) => void) & ((setter: (prevFilters: CrudFilters) => CrudFilters) => void);
    createLinkForSyncWithLocation: (params: SyncWithLocationParams) => string;
    current: number;
    setCurrent: ReactSetState<useTableReturnType["current"]>;
    pageSize: number;
    setPageSize: ReactSetState<useTableReturnType["pageSize"]>;
    pageCount: number;
};
export declare function useTable<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError>({ initialCurrent, initialPageSize, hasPagination, pagination, initialSorter, permanentSorter, defaultSetFilterBehavior, initialFilter, permanentFilter, filters: filtersFromProp, sorters: sortersFromProp, syncWithLocation: syncWithLocationProp, resource: resourceFromProp, successNotification, errorNotification, queryOptions, liveMode: liveModeFromProp, onLiveEvent, liveParams, meta, metaData, dataProviderName, }?: useTableProps<TData, TError>): useTableReturnType<TData, TError>;
export {};
//# sourceMappingURL=index.d.ts.map