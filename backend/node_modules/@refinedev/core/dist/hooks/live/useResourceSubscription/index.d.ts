import { BaseKey, CrudFilters, CrudSorting, LiveEvent, LiveModeProps, MetaQuery, Pagination } from "../../../interfaces";
export declare type UseResourceSubscriptionProps = {
    channel: string;
    params?: {
        ids?: BaseKey[];
        id?: BaseKey;
        meta?: MetaQuery;
        /**
         * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.
         */
        metaData?: MetaQuery;
        pagination?: Pagination;
        /**
         * @deprecated `hasPagination` is deprecated, use `pagination.mode` instead.
         */
        hasPagination?: boolean;
        /**
         * @deprecated `sort` is deprecated. Use `sorters` instead.
         */
        sort?: CrudSorting;
        sorters?: CrudSorting;
        filters?: CrudFilters;
        subscriptionType: "useList" | "useOne" | "useMany";
        [key: string]: any;
    };
    types: LiveEvent["type"][];
    resource?: string;
    enabled?: boolean;
} & LiveModeProps;
export declare type PublishType = {
    (event: LiveEvent): void;
};
export declare const useResourceSubscription: ({ resource, params, channel, types, enabled, liveMode: liveModeFromProp, onLiveEvent, }: UseResourceSubscriptionProps) => void;
//# sourceMappingURL=index.d.ts.map