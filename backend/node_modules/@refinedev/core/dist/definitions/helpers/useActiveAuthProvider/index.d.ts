/**
 * @returns authProvider or legacyAuthProvider if provided, otherwise null
 * @internal
 * NOTE: Will be removed in v5
 */
export declare const useActiveAuthProvider: () => {
    isProvided?: boolean | undefined;
    login?: ((params: any) => Promise<import("../../../interfaces").AuthActionResponse>) | undefined;
    logout?: ((params: any) => Promise<import("../../../interfaces").AuthActionResponse>) | undefined;
    check?: ((params?: any) => Promise<import("../../../interfaces").CheckResponse>) | undefined;
    onError?: ((error: any) => Promise<import("../../../interfaces").OnErrorResponse>) | undefined;
    register?: ((params: any) => Promise<import("../../../interfaces").AuthActionResponse>) | undefined;
    forgotPassword?: ((params: any) => Promise<import("../../../interfaces").AuthActionResponse>) | undefined;
    updatePassword?: ((params: any) => Promise<import("../../../interfaces").AuthActionResponse>) | undefined;
    getPermissions?: ((params?: any) => Promise<unknown>) | undefined;
    getIdentity?: ((params?: any) => Promise<unknown>) | undefined;
    isLegacy: boolean;
} | {
    check: ((params?: any) => Promise<any>) | undefined;
    onError: ((error: any) => Promise<void>) | undefined;
    getIdentity: ((params?: any) => Promise<any>) | undefined;
    isProvided?: boolean | undefined;
    login?: ((params: any) => Promise<import("../../../interfaces").TLoginData>) | undefined;
    register?: ((params: any) => Promise<import("../../../interfaces").TRegisterData>) | undefined;
    forgotPassword?: ((params: any) => Promise<import("../../../interfaces").TForgotPasswordData>) | undefined;
    updatePassword?: ((params: any) => Promise<import("../../../interfaces").TUpdatePasswordData>) | undefined;
    logout?: ((params: any) => Promise<import("../../../interfaces").TLogoutData>) | undefined;
    checkAuth?: ((params?: any) => Promise<any>) | undefined;
    checkError?: ((error: any) => Promise<void>) | undefined;
    getPermissions?: ((params?: any) => Promise<any>) | undefined;
    getUserIdentity?: ((params?: any) => Promise<any>) | undefined;
    isLegacy: boolean;
} | null;
//# sourceMappingURL=index.d.ts.map