import { Action, BaseKey, IResourceItem } from "../../../interfaces";
export declare type UseResourceLegacyProps = {
    /**
     * Determines which resource to use for redirection
     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618
     */
    resourceName?: string;
    /**
     * Determines which resource to use for redirection
     * @default Resource name that it reads from route
     */
    resourceNameOrRouteName?: string;
    /**
     * Adds id to the end of the URL
     * @deprecated resourceName deprecated. Use resourceNameOrRouteName instead # https://github.com/refinedev/refine/issues/1618
     */
    recordItemId?: BaseKey;
};
/**
 * Matches the resource by identifier.
 * If not provided, the resource from the route will be returned.
 * If your resource does not explicitly define an identifier, the resource name will be used.
 */
export declare type UseResourceParam = string | undefined;
declare type UseResourceReturnType = {
    resources: IResourceItem[];
    resource?: IResourceItem;
    /**
     * @deprecated Use `resource.name` instead when you need to get the resource name.
     */
    resourceName?: string;
    id?: BaseKey;
    action?: Action;
};
declare type UseResourceReturnTypeWithResource = UseResourceReturnType & {
    resource: IResourceItem;
};
/**
 * @deprecated Use `useResource` with `identifier` property instead. (`identifier` does not check by route name in new router)
 */
export declare function useResource(props: UseResourceLegacyProps): UseResourceReturnType;
export declare function useResource(): UseResourceReturnType;
export declare function useResource<TIdentifier = UseResourceParam>(identifier: TIdentifier): TIdentifier extends NonNullable<UseResourceParam> ? UseResourceReturnTypeWithResource : UseResourceReturnType;
export {};
//# sourceMappingURL=index.d.ts.map