import React from "react";
import { QueryObserverResult, UseQueryOptions } from "@tanstack/react-query";
import { BaseRecord, GetOneResponse, SuccessErrorNotification, MetaQuery, LiveModeProps, BaseKey, HttpError, Prettify } from "../../interfaces";
export declare type useShowReturnType<TData extends BaseRecord = BaseRecord> = {
    queryResult: QueryObserverResult<GetOneResponse<TData>>;
    showId?: BaseKey;
    setShowId: React.Dispatch<React.SetStateAction<BaseKey | undefined>>;
};
export declare type useShowProps<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError> = {
    /**
     * Resource name for API data interactions
     * @default Reads `:resource` from the URL
     */
    resource?: string;
    /**
     * Data item ID for API data interactions
     * @default Reads `:id` from the URL
     */
    id?: BaseKey;
    /**
     * react-query's [useQuery](https://tanstack.com/query/v4/docs/reference/useQuery) options
     */
    queryOptions?: UseQueryOptions<GetOneResponse<TData>, TError>;
    /**
     * Additional meta data to pass to the data provider's `getOne`
     */
    meta?: MetaQuery;
    /**
     * Additional meta data to pass to the data provider's `getOne`
     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.
     */
    metaData?: MetaQuery;
    /**
     * Target data provider name for API call to be made
     * @default `"default"`
     */
    dataProviderName?: string;
} & LiveModeProps & SuccessErrorNotification<GetOneResponse<TData>, TError, Prettify<{
    id?: BaseKey;
} & MetaQuery>>;
/**
 * `useShow` hook allows you to fetch the desired record.
 * It uses `getOne` method as query function from the dataProvider that is
 * passed to {@link https://refine.dev/docs/api-references/components/refine-config `<Refine>`}.
 *
 * @see {@link https://refine.dev/docs/core/hooks/show/useShow} for more details.
 */
export declare const useShow: <TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError>({ resource: resourceFromProp, id, successNotification, errorNotification, meta, metaData, liveMode, onLiveEvent, dataProviderName, queryOptions, }?: useShowProps<TData, TError>) => useShowReturnType<TData>;
//# sourceMappingURL=useShow.d.ts.map