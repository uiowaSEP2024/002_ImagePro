/// <reference types="react" />
import { QueryClient, QueryClientConfig } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { IRefineContextOptions, IRefineOptions, LiveModeProps, MutationMode } from "src/interfaces";
declare type HandleRefineOptionsProps = {
    options?: IRefineOptions;
    mutationMode?: MutationMode;
    syncWithLocation?: boolean;
    warnWhenUnsavedChanges?: boolean;
    undoableTimeout?: number;
    liveMode?: LiveModeProps["liveMode"];
    disableTelemetry?: boolean;
    reactQueryClientConfig?: QueryClientConfig;
    reactQueryDevtoolConfig?: React.ComponentProps<typeof ReactQueryDevtools> | false;
};
declare type HandleRefineOptionsReturnValues = {
    optionsWithDefaults: IRefineContextOptions;
    disableTelemetryWithDefault: boolean;
    reactQueryWithDefaults: {
        clientConfig: QueryClientConfig | InstanceType<typeof QueryClient>;
        devtoolConfig: false | React.ComponentProps<typeof ReactQueryDevtools>;
    };
};
export declare const handleRefineOptions: ({ options, disableTelemetry, liveMode, mutationMode, reactQueryClientConfig, reactQueryDevtoolConfig, syncWithLocation, undoableTimeout, warnWhenUnsavedChanges, }?: HandleRefineOptionsProps) => HandleRefineOptionsReturnValues;
export {};
//# sourceMappingURL=index.d.ts.map