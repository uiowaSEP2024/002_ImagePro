import { PermissionResponse } from "../../../interfaces";
import { UseQueryResult, UseQueryOptions } from "@tanstack/react-query";
export declare type UsePermissionsLegacyProps<TData = any> = {
    v3LegacyAuthProviderCompatible: true;
    options?: UseQueryOptions<TData>;
};
export declare type UsePermissionsProps<TData = PermissionResponse> = {
    v3LegacyAuthProviderCompatible?: false;
    options?: UseQueryOptions<TData>;
};
export declare type UsePermissionsCombinedProps<TData = any> = {
    v3LegacyAuthProviderCompatible: boolean;
    options?: UseQueryOptions<TData> | UseQueryOptions<PermissionResponse>;
};
export declare type UsePermissionsLegacyReturnType<TData = any> = UseQueryResult<TData, unknown>;
export declare type UsePermissionsReturnType<TData = PermissionResponse> = UseQueryResult<TData, unknown>;
export declare type UsePermissionsCombinedReturnType<TData = any> = UseQueryResult<TData, unknown> | UseQueryResult<PermissionResponse, unknown>;
export declare function usePermissions<TData = any>(props: UsePermissionsLegacyProps<TData>): UsePermissionsLegacyReturnType<TData>;
export declare function usePermissions<TData = PermissionResponse>(props?: UsePermissionsProps<TData>): UsePermissionsReturnType<TData>;
export declare function usePermissions<TData = any>(props?: UsePermissionsCombinedProps<TData>): UsePermissionsCombinedReturnType<TData>;
//# sourceMappingURL=index.d.ts.map