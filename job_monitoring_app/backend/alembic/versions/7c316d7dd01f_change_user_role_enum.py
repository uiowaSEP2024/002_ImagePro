"""Change user role enum

Revision ID: 7c316d7dd01f
Revises: ed38666cb87d
Create Date: 2024-03-25 14:25:21.765444

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "7c316d7dd01f"
down_revision = "ed38666cb87d"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Step 1: Create a new enum type with the updated list of roles
    new_enum = sa.Enum("provider", "hospital", "admin", name="new_user_role")
    new_enum.create(op.get_bind(), checkfirst=False)

    # Step 2: Alter the 'role' column to use the new enum type
    # First, alter the column to use a temporary type (e.g., VARCHAR) to avoid conflicts
    op.alter_column("users", "role", type_=sa.String(), postgresql_using="role::text")
    # Update rows with 'customer' role to 'hospital' before changing the column type
    op.execute("UPDATE users SET role = 'hospital' WHERE role = 'customer'")
    # Then, change the column type to the new enum
    op.alter_column(
        "users",
        "role",
        type_=new_enum,
        nullable=False,
        server_default="hospital",
        postgresql_using="role::new_user_role",
    )

    # Step 3: Drop the old enum type if it's no longer needed
    # This is a raw SQL execution because Alembic/SQLAlchemy might not directly support dropping enum types
    op.execute("DROP TYPE user_role")
    # Rename the new enum type to match the original name, if desired
    op.execute("ALTER TYPE new_user_role RENAME TO user_role")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Re-create the old enum type with the original list of roles
    old_enum = sa.Enum("provider", "customer", name="old_user_role")
    old_enum.create(op.get_bind(), checkfirst=False)

    # Temporarily alter the 'role' column to use a VARCHAR type to avoid conflicts
    op.alter_column(
        "users",
        "role",
        type_=sa.String(),
        nullable=True,
        server_default=None,
        postgresql_using="role::text",
    )

    # Update rows with 'hospital' role to 'customer' before changing the column type back
    # Note: Be careful with this step if 'hospital' was a legitimate value in your previous schema.
    op.execute("UPDATE users SET role = 'customer' WHERE role = 'hospital'")

    # Change the column type back to the old enum type
    op.alter_column(
        "users",
        "role",
        type_=old_enum,
        nullable=True,  # Assuming it was nullable before; adjust as needed
        postgresql_using="role::old_user_role",
    )

    # Drop the new enum type created during the upgrade
    op.execute("DROP TYPE user_role")
    # Optionally, if you had renamed the new enum to 'user_role', you might want to rename the old one back
    op.execute("ALTER TYPE old_user_role RENAME TO user_role")
    # ### end Alembic commands ###
