"""delete jobs table

Revision ID: 593cd73ffb81
Revises: f835537a4c9a
Create Date: 2024-03-04 12:15:35.585790

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "593cd73ffb81"
down_revision = "f835537a4c9a"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # delete jobs table
    op.drop_index("ix_jobs_customer_id", table_name="jobs")
    op.drop_index("ix_jobs_id", table_name="jobs")
    op.drop_index("ix_jobs_job_configuration_id", table_name="jobs")
    op.drop_index("ix_jobs_provider_id", table_name="jobs")
    op.drop_index("ix_jobs_provider_job_id", table_name="jobs")
    op.drop_index("ix_jobs_provider_job_name", table_name="jobs")
    op.drop_table("jobs")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    #  Create jobs table
    op.create_table(
        "jobs",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("provider_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("provider_job_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "provider_job_name", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column("customer_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "job_configuration_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["customer_id"], ["users.id"], name="jobs_customer_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["job_configuration_id"],
            ["job_configurations.id"],
            name="fk_jobs_job_configuration_id",
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["provider_id"], ["users.id"], name="jobs_provider_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="jobs_pkey"),
        sa.UniqueConstraint(
            "provider_id",
            "provider_job_id",
            name="jobs_provider_id_provider_job_id_key",
        ),
    )
    op.create_index(
        "ix_jobs_provider_job_name", "jobs", ["provider_job_name"], unique=False
    )
    op.create_index(
        "ix_jobs_provider_job_id", "jobs", ["provider_job_id"], unique=False
    )
    op.create_index("ix_jobs_provider_id", "jobs", ["provider_id"], unique=False)
    op.create_index(
        "ix_jobs_job_configuration_id", "jobs", ["job_configuration_id"], unique=False
    )
    op.create_index("ix_jobs_id", "jobs", ["id"], unique=False)
    op.create_index("ix_jobs_customer_id", "jobs", ["customer_id"], unique=False)

    # Assuming 'jobs' and 'studies' tables have compatible schemas.
    # reinsert data from studies to jobs
    insert_stmt = sa.sql.text(
        """
                INSERT INTO jobs (id, provider_id, provider_job_id, provider_job_name, customer_id, job_configuration_id)
                SELECT id, provider_id, provider_study_id, provider_study_name, hospital_id, job_configuration_id FROM studies
            """
    )
    op.execute(insert_stmt)
    # ### end Alembic commands ###
