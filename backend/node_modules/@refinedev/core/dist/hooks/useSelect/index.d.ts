import { QueryObserverResult, UseQueryOptions } from "@tanstack/react-query";
import { CrudSorting, Option, BaseRecord, GetManyResponse, GetListResponse, CrudFilters, SuccessErrorNotification, HttpError, LiveModeProps, BaseKey, Pagination, MetaQuery, Prettify } from "../../interfaces";
import { BaseListProps } from "../data/useList";
export declare type UseSelectProps<TData, TError> = {
    /**
     * Resource name for API data interactions
     */
    resource: string;
    /**
     * Set the option's value
     * @default `"title"`
     */
    optionLabel?: keyof TData extends string ? keyof TData : never;
    /**
     * Set the option's label value
     * @default `"id"`
     */
    optionValue?: keyof TData extends string ? keyof TData : never;
    /**
     * Allow us to sort the options
     * @deprecated Use `sorters` instead
     */
    sort?: CrudSorting;
    /**
     * Allow us to sort the options
     */
    sorters?: CrudSorting;
    /**
     * Resource name for API data interactions
     */
    filters?: CrudFilters;
    /**
     * Adds extra `options`
     */
    defaultValue?: BaseKey | BaseKey[];
    /**
     * The number of milliseconds to delay
     * @default `300`
     */
    debounce?: number;
    /**
     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options
     */
    queryOptions?: UseQueryOptions<GetListResponse<TData>, TError>;
    /**
     * Pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)
     * @type {  current?: number; pageSize?: number;}
     * @default `undefined`
     */
    pagination?: Prettify<Omit<Pagination, "mode"> & {
        /**
         * Whether to use server side pagination or not.
         * @default "off"
         */
        mode?: Pagination["mode"];
    }>;
    /**
     * Disabling pagination option from [`useList()`](/docs/api-reference/core/hooks/data/useList/)
     * @type boolean
     * @default `false`
     * @deprecated `hasPagination` is deprecated, use `pagination.mode` instead.
     */
    hasPagination?: boolean;
    /**
     * react-query [useQuery](https://react-query.tanstack.com/reference/useQuery) options
     */
    defaultValueQueryOptions?: UseQueryOptions<GetManyResponse<TData>, TError>;
    /**
     * If defined, this callback allows us to override all filters for every search request.
     * @default `undefined`
     */
    onSearch?: (value: string) => CrudFilters;
    /**
     * Additional meta data to pass to the `useMany` from the data provider
     */
    meta?: MetaQuery;
    /**
     * Additional meta data to pass to the `useMany` from the data provider
     * @deprecated `metaData` is deprecated with refine@4, refine will pass `meta` instead, however, we still support `metaData` for backward compatibility.
     */
    metaData?: MetaQuery;
    /**
     * If there is more than one `dataProvider`, you should use the `dataProviderName` that you will use.
     * @default `default`
     */
    dataProviderName?: string;
    /**
     * Amount of records to fetch in select box list.
     * @deprecated use [`pagination`](https://refine.dev/docs/api-reference/core/interfaceReferences/#pagination) instead
     * @default `undefined`
     */
    fetchSize?: number;
} & SuccessErrorNotification<GetListResponse<TData>, TError, Prettify<BaseListProps>> & LiveModeProps;
export declare type UseSelectReturnType<TData extends BaseRecord = BaseRecord> = {
    queryResult: QueryObserverResult<GetListResponse<TData>>;
    defaultValueQueryResult: QueryObserverResult<GetManyResponse<TData>>;
    onSearch: (value: string) => void;
    options: Option[];
};
export declare const useSelect: <TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError>(props: UseSelectProps<TData, TError>) => UseSelectReturnType<TData>;
//# sourceMappingURL=index.d.ts.map