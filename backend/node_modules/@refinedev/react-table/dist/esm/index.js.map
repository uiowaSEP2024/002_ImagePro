{"version":3,"sources":["../../src/useTable/index.ts","../../src/utils/useIsFirstRender/index.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport {\n    BaseRecord,\n    CrudOperators,\n    HttpError,\n    LogicalFilter,\n    useTable as useTableCore,\n    useTableProps as useTablePropsCore,\n    useTableReturnType as useTableReturnTypeCore,\n} from \"@refinedev/core\";\nimport {\n    useReactTable,\n    TableOptions,\n    Table,\n    getCoreRowModel,\n    ColumnFilter,\n} from \"@tanstack/react-table\";\n\nimport { useIsFirstRender } from \"../utils\";\n\nexport type UseTableReturnType<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = Table<TData> & {\n    refineCore: useTableReturnTypeCore<TData, TError>;\n};\n\nexport type UseTableProps<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n> = {\n    /**\n     * Configuration object for the core of the [useTable](/docs/api-reference/core/hooks/useTable/)\n     * @type [`useTablePropsCore<TData, TError>`](/docs/api-reference/core/hooks/useTable/#properties)\n     */\n    refineCoreProps?: useTablePropsCore<TData, TError>;\n} & Pick<TableOptions<TData>, \"columns\"> &\n    Partial<Omit<TableOptions<TData>, \"columns\">>;\n\nexport function useTable<\n    TData extends BaseRecord = BaseRecord,\n    TError extends HttpError = HttpError,\n>({\n    refineCoreProps: { hasPagination = true, ...refineCoreProps } = {},\n    initialState: reactTableInitialState = {},\n    ...rest\n}: UseTableProps<TData, TError>): UseTableReturnType<TData, TError> {\n    const isFirstRender = useIsFirstRender();\n\n    const useTableResult = useTableCore<TData, TError>({\n        ...refineCoreProps,\n        hasPagination,\n    });\n\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const isPaginationEnabled =\n        (refineCoreProps.pagination?.mode ?? hasPaginationString) !== \"off\";\n\n    const {\n        tableQueryResult: { data },\n        current,\n        setCurrent,\n        pageSize: pageSizeCore,\n        setPageSize: setPageSizeCore,\n        sorters,\n        setSorters,\n        filters: filtersCore,\n        setFilters,\n        pageCount,\n    } = useTableResult;\n\n    const logicalFilters: LogicalFilter[] = [];\n    filtersCore.forEach((filter) => {\n        if (\n            filter.operator !== \"or\" &&\n            filter.operator !== \"and\" &&\n            \"field\" in filter\n        ) {\n            logicalFilters.push(filter);\n        }\n    });\n\n    const reactTableResult = useReactTable<TData>({\n        getCoreRowModel: getCoreRowModel(),\n        data: data?.data ?? [],\n        initialState: {\n            pagination: {\n                pageIndex: current - 1,\n                pageSize: pageSizeCore,\n            },\n            sorting: sorters.map((sorting) => ({\n                id: sorting.field,\n                desc: sorting.order === \"desc\",\n            })),\n            columnFilters: logicalFilters.map((filter) => ({\n                id: filter.field,\n                operator: filter.operator as Exclude<\n                    CrudOperators,\n                    \"or\" | \"and\"\n                >,\n                value: filter.value,\n            })),\n            ...reactTableInitialState,\n        },\n        pageCount,\n        manualPagination: true,\n        manualSorting: true,\n        manualFiltering: true,\n        ...rest,\n    });\n\n    const { state, columns } = reactTableResult.options;\n    const { pagination, sorting, columnFilters } = state;\n\n    const { pageIndex, pageSize } = pagination ?? {};\n\n    useEffect(() => {\n        if (pageIndex !== undefined) {\n            setCurrent(pageIndex + 1);\n        }\n    }, [pageIndex]);\n\n    useEffect(() => {\n        if (pageSize !== undefined) {\n            setPageSizeCore(pageSize);\n        }\n    }, [pageSize]);\n\n    useEffect(() => {\n        if (sorting !== undefined) {\n            setSorters(\n                sorting?.map((sorting) => ({\n                    field: sorting.id,\n                    order: sorting.desc ? \"desc\" : \"asc\",\n                })),\n            );\n\n            if (sorting.length > 0 && isPaginationEnabled && !isFirstRender) {\n                setCurrent(1);\n            }\n        }\n    }, [sorting]);\n\n    useEffect(() => {\n        const crudFilters: LogicalFilter[] = [];\n\n        columnFilters?.map((filter) => {\n            const operator =\n                (\n                    filter as ColumnFilter & {\n                        operator?: Exclude<CrudOperators, \"or\" | \"and\">;\n                    }\n                ).operator ??\n                ((columns.find((c) => c.id === filter.id) as any)?.meta\n                    ?.filterOperator as Exclude<CrudOperators, \"or\" | \"and\">);\n\n            crudFilters.push({\n                field: filter.id,\n                operator:\n                    operator ?? (Array.isArray(filter.value) ? \"in\" : \"eq\"),\n                value: filter.value,\n            });\n        });\n\n        const filteredArray = logicalFilters.filter(\n            (value) =>\n                !crudFilters.some(\n                    (b) =>\n                        value.field === b.field &&\n                        value.operator === b.operator,\n                ),\n        );\n\n        filteredArray?.map((filter) => {\n            crudFilters.push({\n                field: filter.field,\n                operator: filter.operator,\n                value: undefined,\n            });\n        });\n\n        setFilters(crudFilters);\n\n        if (crudFilters.length > 0 && isPaginationEnabled && !isFirstRender) {\n            setCurrent(1);\n        }\n    }, [columnFilters]);\n\n    return {\n        ...reactTableResult,\n        refineCore: useTableResult,\n    };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport const useIsFirstRender = () => {\n    const firstRender = useRef(true);\n\n    useEffect(() => {\n        firstRender.current = false;\n    }, []);\n\n    return firstRender.current;\n};\n"],"mappings":"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","names":["useEffect","useTableCore","useReactTable","getCoreRowModel","useEffect","useRef","useIsFirstRender","firstRender","useTable","hasPagination","refineCoreProps","reactTableInitialState","rest","_a","_b","_c","isFirstRender","useIsFirstRender","useTableResult","useTableCore","hasPaginationString","isPaginationEnabled","data","current","setCurrent","pageSizeCore","setPageSizeCore","sorters","setSorters","filtersCore","setFilters","pageCount","logicalFilters","filter","reactTableResult","useReactTable","getCoreRowModel","sorting","state","columns","pagination","columnFilters","pageIndex","pageSize","useEffect","crudFilters","operator","c","filteredArray","value","b"]}